模块中//开头为注释
注释为//开头
关键字: destAddr method hdr() uri url dst_ip src_ip match_all:   不区分大小写
hdr() uri url string为正则表达式匹配
[destAddr = ip:port]，转发的地址，每个模块只能有一个，0开头则使用原始目标地址
[method [!]= method]，匹配HTTP请求方法
[string [!]= regex_string]，连接中的字符串
[hdr(key) [!]= value]，key为头域，vakue为头域的值
[uri [!]= uri_regex_string]，请求头中的uri，如果请求行为CONNECT saomeng.club:443 HTTP/1.1则uri为saomeng.club:443
[url [!]= url_regex_string]，请求头中的url
[match_all: hdr() | string | uri | url | src_ip | dst_ip = value] ，match_all后面接一个匹配规则，表示前面的规则必须先匹配match_all中设置的规则才会产生匹配

例子：

global模块为全局配置，必须包含
global {
    //监听地址
    listen = 0.0.0.0:80
    
    //默认转发地址，这里的ip是0开头，使用客户端的原始地址
    destaddr = 0.0.0.0:69
    
    //进程数
    //procs = 2
    
    //运行uid
    //uid = 3004
    
    //将程序的pid写入文件
    //pid_path = portForward.pid;
}

转发到服务器的ssr
ssr {
    //转发地址
    destAddr = 127.0.0.1:1080
    //请求头中DNT头的值为1转发到127.0.0.1:1080
    hdr(DNT) = 1
    
    //uri以/%开头转发到127.0.0.1:1080
    uri = ^/%
    
    //只有非CONNECT请求才匹配上面的规则，其他请求不转发到127.0.0.1:1080
    match_all: method != CONNECT
}

转发到服务器的httpDNS
httpdns {
    destAddr = 127.0.0.1:5353
    
    //此处的?在正则表达式中有特殊含义  因此匹配普通的?要\?
    uri = ^/d\?dn=
    
    //只有host为dns.saomeng.club开头的请求才匹配上面的uri = ^/d\?dn=
    match_all: hdr(host) = ^dns.saomeng.club
    
    //host为saomeng.club:5353的请求头  不需要对比以上规则 直接转发到127.0.0.1:5353
    hdr(host) = ^saomeng.club:5353$
}

转发到websocket的v2ray
v2ws {
    destAddr = 127.0.0.1:8082
    
    //数据中包含websocket就转发到127.0.0.1:8082
    string = websocket
}

ip转发
ipForward {
     destAddr = 127.0.0.1:8081
     
     //来自6.6开头的ip转发到127.0.0.1:8081
     src_ip = 6.6/16
     
     //原始目标ip是8.8开头的ip转发到127.0.0.1:8081
     dst_ip = 8.8/16
}